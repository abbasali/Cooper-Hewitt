<?php
// $Id: typekit_api.module,v 1.1.4.2 2011/01/02 21:33:05 sreynen Exp $

define('TYPEKIT_API_BASE_URL', 'https://typekit.com/api/v1/json/');

/**
 * Implements hook_fontyourface_info().
 */
function typekit_api_fontyourface_info() {

  return array(
    'name' => 'Typekit',
    'url' => 'http://typekit.com/',
  );

  return $info;

} // typekit_api_fontyourface_info

/**
 * Implements hook_fontyourface_import().
 */
function typekit_api_fontyourface_import() {

  fontyourface_provider_disable('typekit_api');

  $kits = typekit_api_get_kits();

  foreach ($kits as $kit) {

    $kit_info = typekit_api_get_kit($kit->id);

    if (typekit_api_kit_matches_domain($kit_info, $_SERVER['HTTP_HOST'])) {

      foreach ($kit_info->families as $family_info) {

        foreach ($family_info->variations as $variant_index => $variant_id) {

          $variant = typekit_api_get_variant($family_info->id, $variant_id);

          $metadata = array(
            'typekit_id' => $variant->id,
            'variant' => $variant->font_variant,
            'kit' => $kit_info->id,
          );

          $font = new stdClass;
          $font->name = $variant->name;
          $font->url = 'http://typekit.com/fonts/' . $family_info->slug . '#' . $variant_id;
          $font->provider = 'typekit_api';
          $font->metadata = serialize($metadata);
          $font->css_family = implode(', ', $family_info->css_names);
          $font->css_style = $variant->font_style;
          $font->css_weight = $variant->font_weight;
          $font->foundry = $variant->foundry->name;
          $font->foundry_url = 'http://typekit.com/foundries/' . $variant->foundry->slug;
          $font->tags = array();

          fontyourface_save_font($font);

        } // foreach

      } // foreach

    } // if

  } // foreach

} // typekit_api_fontyourface_import

/**
 * Implements template_preprocess_page().
 */
function typekit_api_preprocess_page(&$vars) {

  if (!empty($vars['fontyourface'])) {

    $kits = array();

    foreach ($vars['fontyourface'] as $used_font) {

      if ($used_font->provider == 'typekit_api') {

        $metadata = unserialize($used_font->metadata);
        $kits[$metadata['kit']] = TRUE;

      } // if

    } // foreach

    if (count($kits) > 0) {

      foreach (array_keys($kits) as $kit) {

        $script = '<script type="text/javascript" src="http://use.typekit.com/' . $kit . '.js"></script>';
        drupal_set_html_head($script);
        $vars['head'] = drupal_get_html_head();

      } // foreach

      drupal_add_js('try{Typekit.load();}catch(e){}', 'inline');
      $vars['scripts'] = drupal_get_js();

    } // if

  } // if

} // typekit_api_preprocess_page

/**
 * Implements hook_form_alter().
 */
function typekit_api_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'fontyourface_settings_form') {

    $form['typekit_api'] = array(
      '#type' => 'fieldset',
      '#title' => 'Typekit',
      '#weight' => -1,
      'typekit_api_token' => array(
        '#type' => 'textfield',
        '#title' => t('TypeKit API token'),
        '#description' => t('Provided at ') . l('Typekit.com/account/tokens', 'https://typekit.com/account/tokens'),
        '#default_value' => variable_get('typekit_api_token', ''),
      ),
      'typekit_api_save' => array(
        '#type' => 'submit',
        '#value' => 'Update',
      ),
    );
    
    $form['#submit'][] = 'typekit_api_token_submit';

  } // if

} // typekit_api_form_alter

/**
 * Updates API token.
 */
function typekit_api_token_submit($form, &$form_state) {
  
  if ($form_state['clicked_button']['#parents'][0] == 'typekit_api_save') {

    variable_set('typekit_api_token', $form_state['values']['typekit_api_token']);
    drupal_set_message(t('Typeit API token updated.'));

  } // if

} // typekit_api_token_submit

/**
 * Implements hook_fontyourface_view().
 */
function typekit_api_fontyourface_view($font, $text) {

  $output = '';
  $sizes = array(32, 24, 18, 14, 12, 10);

  foreach ($sizes as $size) {

    $output .= '<div style="' . fontyourface_font_css($font) . ' font-size: ' . $size . 'px; line-height: ' . $size . 'px;">' . $text . '</div>';

  } // foreach

  return $output;

} // typekit_api_fontyourface_view

/**
 * Implements hook_fontyourface_preview().
 */
function typekit_api_fontyourface_preview($font) {

  return '<span style="' . fontyourface_font_css($font) . ' font-size: 24px;">' . $font->name . '</span>';

} // typekit_api_fontyourface_preview

/**
 * Provides header with token.
 */
function typekit_api_token_headers() {

  return array('X-Typekit-Token' => variable_get('typekit_api_token', ''));

} // typekit_api_token_headers

/**
 * Gets list of kits from API.
 */
function typekit_api_get_kits() {

  $kits = array();

  $response = drupal_http_request(TYPEKIT_API_BASE_URL . 'kits', typekit_api_token_headers());

  if ($response->code == 200) {

    $data = json_decode($response->data);
    $kits = $data->kits;

  } // if

  return $kits;

} // typekit_api_get_kits

/**
 * Get a specific kit from API based on ID.
 */
function typekit_api_get_kit($kit_id) {

  $response = drupal_http_request(TYPEKIT_API_BASE_URL . 'kits/' . $kit_id, typekit_api_token_headers());

  if ($response->code == 200) {

    $data = json_decode($response->data);
    $kit = $data->kit;

  } // if

  return $kit;

} // typekit_api_get_kit

/**
 * Checks if a given kit matches a given domain.
 */
function typekit_api_kit_matches_domain($kit, $domain) {

  foreach ($kit->domains as $kit_domain) {

    if ($kit_domain == $domain) {
      return TRUE;
    } // if

  } // foreach

  return FALSE;

} // typekit_api_kit_matches_domain

/**
 * Get a specific variant from API based on family and variant IDs.
 */
function typekit_api_get_variant($family_id, $variant_id) {

  $response = drupal_http_request(TYPEKIT_API_BASE_URL . 'families/' . $family_id . '/' . $variant_id, typekit_api_token_headers());

  if ($response->code == 200) {

    $data = json_decode($response->data);
    $variant = $data->variation;

  } // if

  return $variant;

} // typekit_api_get_variant
