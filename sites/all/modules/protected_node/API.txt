There is now a simple API with three functions ready to be used
by 3rd party modules:


bool protected_node_set_protected(int $nid, string $passwd = NULL)
=============================================================
Protected the specified node.

$nid can be the node identifier or any other field that the node_load()
function accepts.

Unless an error occurs, the function at least protects the node. When the
$passwd parameter is specified, it also changes the password and as a side
effect kicks out all the users who had previously enter that node password.

All users will have to re-enter the password.

The function returns TRUE if the node is protected.


bool protected_node_unset_protected(int $nid)
=============================================
Unprotect the specified node.

This function ensures that the specified node is not protected anymore.
It does not delete the row from the database which means calling the
protected_node_set_protected() function with the same $nid parameter
will restore the previous state (assuming the node was protected before.)

When the node was previously protected and this call succeeds, the method
returns TRUE.

If an invalid $nid is passed, an SQL error occurs or the node was not
protected, FALSE is returned.


bool protected_node_isset_protected(int $nid)
=============================================
Check whether the specified node is protected.

This method returns TRUE if the node identified by the provided $nid is
currently protected.

Returns FALSE in all other cases (invalid $nid, SQL error, etc.)
