<?php
// $Id: singlesignon_client.module,v 1.2 2009/09/30 18:56:47 meba Exp $

/**
 * @file
 * Main module file for Single sign-on client.
 *
 * Intercepts requests on boot to set up linked SSO sessions and redirects user forms to the controller site.
 */

/**
 * Default list of user agent keywords to match for bot recognition.
 */
define('SINGLESIGNON_BOT_NAMES', "Google\nYahoo\nBlogPulse\nia_archiver\nPingdom\nTeoma\nNetcraft\nMnogosearch\npage.store\nlibwww.perl\nlibcurl\ndel.icio.us\nwiji\nWebImages\nUser-Agent:\nPython-urllib\nTwitturly\nRuby\nfacebookexternalhit\nColdFusion\nPycURL\nPEAR HTTP_Request class\nLWP::Simple\n'artviper\nWordPress");

/**
 * Default list of IPs to match for bot recognition.
 */
define('SINGLESIGNON_BOT_IPS', "64.191.203.34");

/**
 * Default list of paths to ignore for SSO purposes.
 */
define('SINGLESIGNON_BOT_PATHS', "cron.php\nfeed\nrss.xml\nimage-cacher/*\niframe/refresh\nreset");

/**
 * Default user agent regex to match for bot recognition.
 */
define('SINGLESIGNON_BOT_REGEX', "/bot|spider|crawler/i");

/**
 * Implementation of hook_boot().
 */
function singlesignon_client_boot() {
  global $user, $base_url;

  // Add P3P Compact Policy (necessary for IE thirdparty Cookies)
  header('P3P: CP="IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT"');

  if ($_GET['singlesignon_message']) {
    drupal_set_message(check_plain($_GET['singlesignon_message']));
  }

  // See if this request needs to be ignored.
  if (singlesignon_ignore_request()) {
    // Prevent creation of sticky local sessions.
    if (!isset($user->global_sid) && ($user->global_sid != '')) {
      session_save_session(FALSE);
    }
    return;
  }

  // Verify SSO settings.
  $controller = variable_get('singlesignon_client_controller_url', '');
  $key = variable_get('singlesignon_client_private_key', '');
  if (!$controller || !$key) {
    return;
  }
  $claim = isset($_GET['q']) && ($_GET['q'] == 'singlesignon/claim');

  // Users without a global session must go through the authentication flow.
  if (!isset($user->global_sid) || $user->global_sid == '' || $claim) {
    // Note: doing a drupal_bootstrap() call from within the bootstrap process
    // is tricky. Ensure we finish this phase by calling drupal_page_header()
    // and exit().
    drupal_page_header();
    drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
    include_once dirname(drupal_get_path('module', 'singlesignon_client')) .'/singlesignon.inc';

    // See if we are trying to claim a session.
    if ($claim) {
      if (isset($_SESSION['request_id'])) {
        // Verify request integrity, request ID and nonce.
        if (!singlesignon_verify_request($key) ||
            $_GET['request_id'] != $_SESSION['request_id'] ||
            !singlesignon_claim_session($_GET['nonce'])) {
          SSO_DEBUG && singlesignon_log(array('Status' => 'Session claim request invalid'));
          drupal_access_denied();
        }
        else {
          // Return to the original request origin.
          $goto = $_GET['origin'];
          if ($_GET['singlesignon_message']) {
            $goto .= (strpos($goto, '?') !== FALSE ? '&' : '?') . 'singlesignon_message=' . urlencode($_GET['singlesignon_message']);
          }
          singlesignon_goto($goto);
        }
      }
      else {
        // User agent does not respect cookies. Ignore.
        SSO_DEBUG && singlesignon_log(array('Status' => 'User agent does not respect cookies'));
        if (!count($_COOKIE)) {
          _singlesignon_cookies_required();
        }
        else {
          drupal_access_denied();
        }
      }
    }
    else {
      // Regenerate the current session ID.
      sess_regenerate();

      // Set up a request id and try to associate with the controller.
      $_SESSION['request_id'] = singlesignon_get_random_id();
      $request_data = array(
          'origin' => $base_url . request_uri(),
          'request_id' => $_SESSION['request_id'],
          );
      if ($_GET['singlesignon_message']) {
        $request_data['singlesignon_message'] = $_GET['singlesignon_message'];
      }

      singlesignon_goto(singlesignon_create_request(
        $controller,
        'singlesignon/associate',
        $request_data,
        $key
      ));

      SSO_DEBUG && singlesignon_log(array('Status' => 'Beginning session propagation handshake', 'Request ID' => $_SESSION['request_id']));
    }
    exit;
  }
}

/**
 * Notify the user that cookie support is required.
 */
function _singlesignon_cookies_required() {
  drupal_set_title(t('Cookie support required'));
  print theme('page', '<p>'. t('Your Web browser is not currently configured to support Cookies. Please enable Cookie support and try again.') .'</p>');
  exit;
}

/**
 * Implementation of hook_menu().
 */
function singlesignon_client_menu() {
  $items['admin/settings/singlesignon-client'] = array(
    'title' => 'Single sign-on client',
    'description' => 'Link up this site into a single sign-on network.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('singlesignon_client_admin_settings'),
    'access arguments' => array('administer single-sign on'),
    'file' => 'singlesignon_client.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function singlesignon_client_perm() {
  return array('administer single-sign on');
}

/**
 * Implementation of hook_form_alter().
 */
function singlesignon_client_form_alter(&$form, $form_state, $form_id) {
  include_once dirname(drupal_get_path('module', 'singlesignon_client')) .'/singlesignon.inc';
  $controller = variable_get('singlesignon_client_controller_url', '');
  $key = variable_get('singlesignon_client_private_key', '');

  global $base_url;
  switch ($form_id) {
    case 'user_pass':
      $action = 'user/password';
      break;

    case 'user_register':
      if (stripos($form['#action'], 'user/register') && !variable_get('user_email_verification', TRUE) && variable_get('user_register', 1) < 2) {
        // User is registering, email verifications are turned off and admin approval is not required.
        $_SESSION['singlesignon_message'] = t('You have successfully registered on this site. Please Log in now.');
      }
      break;

    case 'user_login_block':
    case 'user_login':
      $action = 'user/login';
      // Ensure the block submits to the stand-alone form.
      $form['form_id']['#value'] = 'user_login';
      break;
  }

  // Change user form actions to a signed URL on the controller site.
  if (isset($action)) {
    // We need to make sure that singlesignon_message is not passed after this screen.
    $data = parse_url(request_uri());
    parse_str($data['query'], $query);
    unset($query['singlesignon_message']);
    $query = singlesignon_build_query($query);
    $origin = $base_url . '?' . $query;

    $form['#action'] = singlesignon_create_request(
        $controller,
        $action,
        array(
          'origin' => $origin,
        ),
        $key
      );
  }
}

/**
 * Helper function for converting a list of tokens into a regular expression.
 */
function singlesignon_client_list_to_regex($list, $substring = TRUE) {
  $regex = str_replace("\*", ".*?", preg_replace("/\r?\n/", '|', preg_quote(trim($list), '/')));
  if (!$substring) {
    $regex = '^'. $regex .'$';
  }
  return '/'. $regex .'/';
}

/**
 * Determine if the request should be ignored for SSO.
 */
function singlesignon_ignore_request() {
  // We can only transparently maintain state for GET requests. Don't attempt
  // SSO for other requests.
  if ($_SERVER['REQUEST_METHOD'] != 'GET') {
    return TRUE;
  }

  // Prevent looping if controller and client are running on one installation
  // (in case of Domain Access modules and others).
  $client = (isset($_SERVER['HTTPS']) ? 'https' : 'http') . '://' . $_SERVER['SERVER_NAME'];
  if (variable_get('singlesignon_client_controller_url', '') == $client) {
    // Can't use t() here - it doesn't exist yet. small TODO
    drupal_set_message('Only one single sign-on module can be installed at a time. Please disable single sign-on client or controller on this site.', 'error');
    return TRUE;
  }

  // Fetch recognition rules.
  $bot_names = singlesignon_client_list_to_regex(variable_get('singlesignon_bot_names', SINGLESIGNON_BOT_NAMES));
  $bot_ips = singlesignon_client_list_to_regex(variable_get('singlesignon_bot_ips', SINGLESIGNON_BOT_IPS), FALSE);
  $bot_paths = singlesignon_client_list_to_regex(variable_get('singlesignon_bot_paths', SINGLESIGNON_BOT_PATHS), FALSE);
  $bot_regex = variable_get('singlesignon_bot_regex', SINGLESIGNON_BOT_REGEX);

  // Match them.
  return preg_match($bot_names, $_SERVER['HTTP_USER_AGENT']) ||
         preg_match($bot_ips, ip_address()) ||
         preg_match($bot_paths, ltrim(request_uri(), '/')) ||
         preg_match($bot_regex, $_SERVER['HTTP_USER_AGENT']);
}
