<?php
// $Id: singlesignon_controller.module,v 1.2 2009/09/30 18:56:47 meba Exp $

/**
 * @file
 * Main module file for Single sign-on controller.
 *
 * Accepts association and user form requests for client sites.
 */

/**
 * Implementation of hook_menu().
 */
function singlesignon_controller_menu() {
  $items['admin/settings/singlesignon-controller'] = array(
    'title' => 'Single sign-on controller',
    'description' => 'Review your single sign-on network.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('singlesignon_controller_admin_settings'),
    'access arguments' => array('administer single-sign on'),
  );

  $items['singlesignon/associate'] = array(
    'page callback' => 'singlesignon_controller_associate',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_boot().
 */
function singlesignon_controller_boot() {
  // Add P3P Compact Policy (necessary for IE thirdparty Cookies)
  header('P3P: CP="IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT"');
}

/**
 * Implementation of hook_perm().
 */
function singlesignon_controller_perm() {
  return array('administer single-sign on');
}

/**
 * Implementation of hook_form_alter().
 */
function singlesignon_controller_form_alter(&$form, $form_state, $form_id) {
  // Catch remote submissions to user forms from client sites.
  global $base_url;
  switch ($form_id) {
    case 'user_register':
    case 'user_pass':
    case 'user_login_block':
    case 'user_login':
      $form['#submit'][] = 'singlesignon_controller_user_form_submit';
      break;
  }
}

/**
 * Submit callback for user forms redirect.
 *
 * We avoid drupal_get_destination() so that we can redirect to external URLs
 * and only to signed targets.
 */
function singlesignon_controller_user_form_submit($form, &$form_state) {
  include_once dirname(drupal_get_path('module', 'singlesignon_controller')) .'/singlesignon.inc';
  $key = singlesignon_controller_get_private_key();

  // Verify request integrity.
  if (!singlesignon_verify_request($key) || !isset($_GET['origin'])) {
    return;
  }
  else {
    // Redirect to given origin.
    $form_state['redirect'] = $_GET['origin'];
  }
}

/**
 * Helper function for returning/generating the SSO private key.
 */
function singlesignon_controller_get_private_key() {
  return hash_hmac('ripemd160', 'singlesignon derived key', drupal_get_private_key());
}

/**
 * Menu callback: SSO configuration form.
 */
function singlesignon_controller_admin_settings() {
  global $base_url;

  $form['url'] = array(
    '#type' => 'item',
    '#title' => t('Controller URL'),
    '#value' => check_plain($base_url),
    '#description' => t('Copy this URL to sites running the Single sign-on client module.'),
  );

  $form['key'] = array(
    '#type' => 'item',
    '#title' => t('Private key'),
    '#value' => check_plain(singlesignon_controller_get_private_key()),
    '#description' => t('Copy this private key to sites running the Single sign-on client module.'),
  );

  return $form;
}

/**
 * Menu callback: associate with a given client site.
 */
function singlesignon_controller_associate() {
  global $base_url;

  include_once dirname(drupal_get_path('module', 'singlesignon_controller')) .'/singlesignon.inc';
  $key = singlesignon_controller_get_private_key();

  // Verify request integrity.
  if (!singlesignon_verify_request($key) || !isset($_GET['origin']) || !isset($_GET['request_id'])) {
    SSO_DEBUG && singlesignon_log(array('Status' => 'Session association request invalid', 'Request ID' => $_SESSION['request_id']));
    return drupal_access_denied();
  }

  // Regenerate session.
  sess_regenerate();

  // Set up new linked session with a nonce.
  $new_session = singlesignon_get_random_id(); // Note: random/unused session ID.
  $domain = singlesignon_get_domain($_GET['origin']);
  $nonce = singlesignon_get_random_id();
  sess_write($new_session, '', $domain, session_id(), $nonce, TRUE);

  // Make sure the global session is being saved.
  $_COOKIE[session_name()] = TRUE;

  // Prepare root base URL for the given origin site.
  $parsed = parse_url($_GET['origin']);
  $client_url = $parsed['scheme'] .'://'. $parsed['host'];

  // Return URL to claim the newly set up session using the assigned nonce.
  $request_data = array(
      'nonce' => $nonce,
      'origin' => $_GET['origin'],
      'request_id' => $_GET['request_id'],
      );
  if ($_GET['singlesignon_message']) {
    $request_data['singlesignon_message'] = $_GET['singlesignon_message'];
  }

  singlesignon_goto(singlesignon_create_request(
    $client_url,
    'singlesignon/claim',
    $request_data,
    $key
  ));

  SSO_DEBUG && singlesignon_log(array('Status' => 'Session associated', 'Request ID' => $_GET['request_id'], 'Nonce' => $nonce));
}

