--- includes/session.inc	2008-12-22 11:22:41.000000000 -0800
+++ custom/singlesignon/session.singlesignon.inc	2009-05-16 16:07:59.000000000 -0700
@@ -1,9 +1,16 @@
 <?php
-// $Id: session.inc.diff,v 1.1 2009/09/30 18:55:11 meba Exp $
+// $Id: session.inc.diff,v 1.1 2009/09/30 18:55:11 meba Exp $
 
 /**
  * @file
- * User session handling functions.
+ * Single sign-on session handling functions.
+ *
+ *  - Stores additional SSO information per session
+ *  - Enforces domain-restrictions for sessions
+ *  - Links up controller/client sessions and keeps them in sync
+ *  - Contains helper functions for claiming / deleting linked sessions
+ *
+ * Based on: session.inc,v 1.44.2.6 2008/12/11 00:29:34 goba
  */
 
 function sess_open($save_path, $session_name) {
@@ -29,7 +36,7 @@
   }
 
   // Otherwise, if the session is still active, we have a record of the client's session in the database.
-  $user = db_fetch_object(db_query("SELECT u.*, s.* FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.sid = '%s'", $key));
+  $user = db_fetch_object(db_query("SELECT u.*, s.* FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.sid = '%s' AND s.domain = '%s'", $key, singlesignon_get_domain()));
 
   // We found the client's session record and they are an authenticated user
   if ($user && $user->uid > 0) {
@@ -47,13 +54,18 @@
   // We didn't find the client's record (session has expired), or they are an anonymous user.
   else {
     $session = isset($user->session) ? $user->session : '';
+    $global_sid = isset($user->global_sid) ? $user->global_sid : '';
     $user = drupal_anonymous_user($session);
+    $user->global_sid = $global_sid;
   }
 
+  // Log the UID at the beginning of the request to catch log-in / log-out requests.
+  sess_old_uid($user->uid);
+
   return $user->session;
 }
 
-function sess_write($key, $value) {
+function sess_write($key, $value, $domain = '', $global_sid = '', $nonce = '', $force = FALSE) {
   global $user;
 
   // If saving of session data is disabled or if the client doesn't have a session,
@@ -61,12 +73,27 @@
   // the session table. This reduces memory and server load, and gives more useful
   // statistics. We can't eliminate anonymous session table rows without breaking
   // the throttle module and the "Who's Online" block.
-  if (!session_save_session() || ($user->uid == 0 && empty($_COOKIE[session_name()]) && empty($value))) {
+  if (!$force && (!session_save_session() || ($user->uid == 0 && empty($_COOKIE[session_name()]) && empty($value)))) {
     return TRUE;
   }
 
-  db_query("UPDATE {sessions} SET uid = %d, cache = %d, hostname = '%s', session = '%s', timestamp = %d WHERE sid = '%s'", $user->uid, isset($user->cache) ? $user->cache : '', ip_address(), $value, time(), $key);
+  // Fill out SSO parameters for session if not supplied.
+  if (!$domain) {
+    $domain = singlesignon_get_domain();
+  }
+  if (!$global_sid) {
+    $global_sid = isset($user->global_sid) ? $user->global_sid : '';
+  }
+
+  db_query("UPDATE {sessions} SET uid = %d, cache = %d, hostname = '%s', session = '%s', timestamp = %d, domain = '%s', global_sid = '%s', nonce = '%s' WHERE sid = '%s'", $user->uid, isset($user->cache) ? $user->cache : '', ip_address(), $value, time(), $domain, $global_sid, $nonce, $key);
   if (db_affected_rows()) {
+    // If a UID change is made, delete all linked client sessions. This forces
+    // the linked sessions to be recreated one by one on the next visit (to
+    // regenerate their SIDs).
+    if ($user->uid != sess_old_uid()) {
+      singlesignon_destroy_client_sessions($key);
+    }
+
     // Last access time is updated no more frequently than once every 180 seconds.
     // This reduces contention in the users table.
     if ($user->uid && time() - $user->access > variable_get('session_write_interval', 180)) {
@@ -76,7 +103,7 @@
   else {
     // If this query fails, another parallel request probably got here first.
     // In that case, any session data generated in this request is discarded.
-    @db_query("INSERT INTO {sessions} (sid, uid, cache, hostname, session, timestamp) VALUES ('%s', %d, %d, '%s', '%s', %d)", $key, $user->uid, isset($user->cache) ? $user->cache : '', ip_address(), $value, time());
+    @db_query("INSERT INTO {sessions} (sid, uid, cache, hostname, session, timestamp, domain, global_sid, nonce) VALUES ('%s', %d, %d, '%s', '%s', %d, '%s', '%s', '%s')", $key, $user->uid, isset($user->cache) ? $user->cache : '', ip_address(), $value, time(), $domain, $global_sid, $nonce);
   }
 
   return TRUE;
@@ -100,21 +127,23 @@
   session_regenerate_id();
 
   db_query("UPDATE {sessions} SET sid = '%s' WHERE sid = '%s'", session_id(), $old_session_id);
+  db_query("UPDATE {sessions} SET global_sid = '%s' WHERE global_sid = '%s'", session_id(), $old_session_id);
 }
 
 /**
- * Counts how many users have sessions. Can count either anonymous sessions or authenticated sessions.
+ * Counts how many users have sessions. Can count either anonymous sessions, authenticated sessions, or both.
  *
  * @param int $timestamp
  *   A Unix timestamp representing a point of time in the past.
  *   The default is 0, which counts all existing sessions.
- * @param boolean $anonymous
+ * @param int $anonymous
  *   TRUE counts only anonymous users.
  *   FALSE counts only authenticated users.
+ *   Any other value will return the count of both authenticated and anonymous users.
  * @return  int
  *   The number of users with sessions.
  */
-function sess_count($timestamp = 0, $anonymous = true) {
+function sess_count($timestamp = 0, $anonymous = TRUE) {
   $query = $anonymous ? ' AND uid = 0' : ' AND uid > 0';
   return db_result(db_query('SELECT COUNT(sid) AS count FROM {sessions} WHERE timestamp >= %d'. $query, $timestamp));
 }
@@ -126,7 +155,11 @@
  *   the session id
  */
 function sess_destroy_sid($sid) {
+  singlesignon_destroy_controller_session($sid);
+
   db_query("DELETE FROM {sessions} WHERE sid = '%s'", $sid);
+
+  singlesignon_destroy_client_sessions($sid);
 }
 
 /**
@@ -147,6 +180,12 @@
   // three weeks (1814400 seconds) will his/her session be removed.
   db_query("DELETE FROM {sessions} WHERE timestamp < %d", time() - $lifetime);
 
+  // Delete orphaned slave sessions.
+  $result = db_query("SELECT a.sid FROM {sessions} a LEFT JOIN {sessions} b ON a.global_sid = b.sid WHERE a.global_sid <> '' AND b.sid IS NULL");
+  while ($session = db_fetch_object($result)) {
+    sess_destroy_sid($session->sid);
+  }
+
   return TRUE;
 }
 
@@ -169,3 +208,69 @@
   }
   return ($save_session);
 }
+
+/**
+ * Helper function for retrieving the session domain from a URL.
+ */
+function singlesignon_get_domain($url = NULL) {
+  global $base_url;
+  if (!isset($url)) {
+    $url = $base_url;
+  }
+  $parsed = parse_url($url);
+  return preg_replace('/^www\./', '', $parsed['host']) . ($parsed['scheme'] == 'https' ? ':ssl' : '');
+}
+
+/**
+ * Helper function for claiming a session using a nonce.
+ */
+function singlesignon_claim_session($nonce) {
+  global $user;
+
+  // Look up session by nonce.
+  $sid = db_result(db_query("SELECT sid FROM {sessions} WHERE nonce = '%s'", $nonce));
+
+  if ($sid) {
+    // Wipe nonce from the DB.
+    db_query("UPDATE {sessions} SET nonce = '' WHERE sid = '%s'", $sid);
+
+    // Adopt the new session and give it a permanent SID.
+    sess_destroy_sid(session_id());
+    session_id($sid);
+    sess_regenerate();
+
+    // Don't overwrite the information in the adopted session.
+    session_save_session(FALSE);
+
+    return TRUE;
+  }
+  return FALSE;
+}
+
+/**
+ * Helper function for deleting associated client sessions.
+ */
+function singlesignon_destroy_client_sessions($sid) {
+  db_query("DELETE FROM {sessions} WHERE global_sid = '%s'", $sid);
+}
+
+/**
+ * Helper function for deleting an associated controller session (and all its client sessions).
+ */
+function singlesignon_destroy_controller_session($sid) {
+  $global_sid = db_result(db_query("SELECT global_sid FROM {sessions} WHERE sid = '%s'", $sid));
+  if ($global_sid) {
+    sess_destroy_sid($global_sid);
+  }
+}
+
+/**
+ * Helper function to track uid changes in page requests.
+ */
+function sess_old_uid($uid = NULL) {
+  static $_uid = 0;
+  if (!is_null($uid)) {
+    $_uid = $uid;
+  }
+  return $_uid;
+}
